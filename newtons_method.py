import numpy as np

import math


def f(x):
    """
    Исходная функция f(x) = x^2 - 2x + e^x
    """
    return x ** 2 - 2 * x + math.e ** (-x)


def fprime(x):
    """
    Первая производная f'(x) = 2x - 2 + e^x
    """
    return 2 * x - 2 - math.e ** (-x)


def fprime2(x):
    """
    Вторая производная f''(x) = 2 + e^x
    (используется в методе Ньютона)
    """
    return 2 + math.e ** (-x)


def newton_method(fprime, fprime2, x0, eps=0.05, max_iter=100):
    """
    Метод Ньютона для поиска корня уравнения f'(x) = 0.
    fprime  — первая производная,
    fprime2 — вторая производная,
    x0      — начальное приближение,
    eps     — требуемая точность по x,
    max_iter — ограничение числа итераций.
    """
    for _ in range(max_iter):
        # Вычисляем очередное приближение
        x_next = x0 - fprime(x0) / fprime2(x0)

        # Проверяем, достаточно ли мы приблизились
        if abs(x_next - x0) < eps:
            return x_next
        x0 = x_next

    # Если за max_iter не сошлись — вернём текущее приближение
    return x0


# ==== Основная часть решения ====

a, b = 1.0, 1.5
eps = 0.0001

# 1) Проверим знак f'(x) на концах
fpa = fprime(a)
fpb = fprime(b)

print(f"f'(1)   = {fpa}")
print(f"f'(1.5) = {fpb}\n")

if fpa * fpb < 0:
    # Это значит, что f'(x) меняет знак, и внутри [a,b] есть корень
    print("Похоже, что внутри [1, 1.5] есть точка, где f'(x)=0.")
    # Можно запустить метод Ньютона с некоторым x0 внутри [1, 1.5]
    x0 = (a + b) / 2  # например, возьмём середину
    x_extremum = newton_method(fprime, fprime2, x0, eps=eps)

    # Проверяем, не «убежало» ли решение за границы
    if not (a <= x_extremum <= b):
        print("Найденный корень лежит вне [1, 1.5], значит экстремум не на интервале.")
        x_extremum = None
    else:
        print(f"Точка экстремума (по методу Ньютона) ≈ {x_extremum}")
else:
    print("Производная не меняет знак на [1, 1.5], корня уравнения f'(x)=0 нет.")
    x_extremum = None

# 2) Вычислим значения функции на концах
fa = f(a)
fb = f(b)
print(f"\nf(1)   = {fa}")
print(f"f(1.5) = {fb}\n")

# 3) Определим, где минимум и максимум на отрезке
#    (если функция монотонна, то достаточно сравнить f(a) и f(b))
if fpa > 0 and fpb > 0:
    # f'(x) > 0 на всём отрезке => функция возрастает => минимум при x=a, максимум при x=b
    print("Функция возрастает на [1, 1.5].")
    print(f"Минимум на отрезке: x=1, f(1)={fa}")
    print(f"Максимум на отрезке: x=1.5, f(1.5)={fb}")
elif fpa < 0 and fpb < 0:
    # Если бы f'(x) < 0 => убывает => минимум при b, максимум при a
    print("Функция убывает на [1, 1.5].")
    print(f"Минимум на отрезке: x=1.5, f(1.5)={fb}")
    print(f"Максимум на отрезке: x=1, f(1)={fa}")
else:
    # Теоретически если бы знак менялся, мы нашли бы корень внутри
    # Но оставим проверку на всякий случай
    print("Проверяем, действительно ли есть стационарная точка или нужно сравнивать концы.")
    if x_extremum is not None:
        print(f"Проверяем f(x_extremum) = {f(x_extremum)}")
    # Всё равно проверим концы
    print("Сравнение концов:")
    if fa < fb:
        print(f"Минимум при x={a}, максимум при x={b}")
    else:
        print(f"Минимум при x={b}, максимум при x={a}")
